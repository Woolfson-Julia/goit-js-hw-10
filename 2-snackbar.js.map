{"version":3,"file":"2-snackbar.js","sources":["../src/js/2-snackbar.js"],"sourcesContent":["// Импортируем библиотеку iziToast для отображения уведомлений\nimport iziToast from \"izitoast\";\n\n// Находим элементы на странице: \n// - инпут, в который пользователь вводит задержку\n// - форму, которую пользователь отправляет\nconst inputDelayForm = document.querySelector('.js-input');\nconst formSubmit = document.querySelector('.js-form');\n\n\n// Функция для получения выбранного значения радио-кнопки (статуса)\nconst getSelectedState = () => {\n    // Находим выбранную радио-кнопку с именем \"state\"\n  const selectedRadio = document.querySelector('input[name=\"state\"]:checked');\n   // Если кнопка выбрана, возвращаем её значение fulfilled' или 'rejected'\n  if (selectedRadio) {\n    return selectedRadio.value;\n  }\n  // Если ничего не выбрано, возвращаем null\n  return null;\n}\n\n// Функция для создания и выполнения промиса с заданным состоянием и задержкой\nconst createPromise = (state, delay) => {\n  // Возвращаем новый промис\n  return new Promise((resolve, reject) => {\n    // Используем setTimeout для выполнения после задержки\n    setTimeout(() => {\n      if (state === 'fulfilled') {\n        // Если состояние 'fulfilled', промис выполняется успешно\n        resolve(`Fulfilled promise in ${delay}ms`); // сообщение при успешном выполнении\n      } else if (state === 'rejected') {\n        // Если состояние 'rejected', промис отклоняется с ошибкой\n        reject(`Rejected promise in ${delay}ms`); // сообщение при ошибке\n        // Если состояния нет, ничего не делаем\n      } else {\n        return;\n      }\n    }, delay); // Задержка в миллисекундах\n  })\n};\n    \n// Обработчик события отправки формы\nconst onCreatePromise = (event) => {\n    // Отменяем стандартное поведение формы (перезагрузку страницы)\n  event.preventDefault();\n\n    // Получаем состояние (fulfilled/rejected)\n  const state = getSelectedState();\n    // Преобразуем введенную задержку в число\n  const delay = parseInt(inputDelayForm.value, 10);\n    // Проверяем, что задержка является положительным числом (первое проверка явл. ли числом)\n  if (!isNaN(delay) && delay >= 0) {\n    // Если состояние выбрано, создаём и обрабатываем промис\nif (state) {\n  createPromise(state, delay)\n      // Если промис выполнен успешно, отображаем уведомление об успехе\n      .then(result => {\n        iziToast.success({\n          message: result\n      })\n      })\n    .catch(error => {\n         // Если промис отклонён, отображаем уведомление об ошибке\n        iziToast.error({\n          message: error\n        })\n      });\n  }\n}\n  }\n  \n\n// Добавляем обработчик события для отправки формы\nformSubmit.addEventListener('submit', onCreatePromise);\n"],"names":["inputDelayForm","formSubmit","getSelectedState","selectedRadio","createPromise","state","delay","resolve","reject","onCreatePromise","event","result","iziToast","error"],"mappings":"wIAMA,MAAMA,EAAiB,SAAS,cAAc,WAAW,EACnDC,EAAa,SAAS,cAAc,UAAU,EAI9CC,EAAmB,IAAM,CAE7B,MAAMC,EAAgB,SAAS,cAAc,6BAA6B,EAE1E,OAAIA,EACKA,EAAc,MAGhB,IACT,EAGMC,EAAgB,CAACC,EAAOC,IAErB,IAAI,QAAQ,CAACC,EAASC,IAAW,CAEtC,WAAW,IAAM,CACf,GAAIH,IAAU,YAEZE,EAAQ,wBAAwBD,CAAK,IAAI,UAChCD,IAAU,WAEnBG,EAAO,uBAAuBF,CAAK,IAAI,MAGvC,OAEH,EAAEA,CAAK,CACZ,CAAG,EAIGG,EAAmBC,GAAU,CAEjCA,EAAM,eAAc,EAGpB,MAAML,EAAQH,IAERI,EAAQ,SAASN,EAAe,MAAO,EAAE,EAE3C,CAAC,MAAMM,CAAK,GAAKA,GAAS,GAE5BD,GACFD,EAAcC,EAAOC,CAAK,EAErB,KAAKK,GAAU,CACdC,EAAS,QAAQ,CACf,QAASD,CACnB,CAAO,CACP,CAAO,EACF,MAAME,GAAS,CAEZD,EAAS,MAAM,CACb,QAASC,CACnB,CAAS,CACT,CAAO,CAGJ,EAIHZ,EAAW,iBAAiB,SAAUQ,CAAe"}