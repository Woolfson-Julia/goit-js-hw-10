{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["// Импортируем библиотеки\nimport flatpickr from \"flatpickr\"; // Библиотека для выбора даты и времени\nimport iziToast from \"izitoast\"; // Библиотека для отображения уведомлений\n\n// Находим элементы на странице: \n// Кнопка старта, которая будет запускать таймер\nlet buttonStart = document.querySelector('[data-start]');\n// Инпут для выбора даты и времени\nlet inputEl = document.querySelector('#datetime-picker');\n\n// Инициализируем переменную для выбранной пользователем даты (по умолчанию 0)\nlet userSelectedDate = 0;\n// Сразу отключаем кнопку старта, пока не выбрана правильная дата\nbuttonStart.disabled = true;\n// Опции для инициализации календаря flatpickr\nconst options = {\n  enableTime: true,  // Включаем возможность выбора времени\n  time_24hr: true, // Устанавливаем 24-часовой формат времени\n  defaultDate: new Date(), // Устанавливаем текущую дату и время по умолчанию\n  minuteIncrement: 1, // Инкремент времени по минутам\n  onClose(selectedDates) { // Колбэк, когда пользователь выбирает дату и закрывает календарь\n        // Сохраняем выбранную дату\n    userSelectedDate = selectedDates[0];\n\n       // Проверяем, если выбранная дата раньше текущей\n    if (userSelectedDate.getTime() < options.defaultDate.getTime()) {\n       // Показываем ошибку, если дата в прошлом\n      iziToast.error({\n    message: \"Please choose a date in the future\" // Сообщение об ошибке\n      });\n      // Отключаем кнопку старта\n      buttonStart.disabled = true;\n    }\n    else {\n        // Включаем кнопку старта, если дата корректная\n      buttonStart.disabled = false;\n    }\n  },\n};\n\n// Инициализируем flatpickr с заданными опциями\nflatpickr(\"#datetime-picker\", options);\n\n// Функция для преобразования миллисекунд в более читаемый формат (дни, часы, минуты, секунды)\nfunction convertMs(ms) {\n  // Количество миллисекунд в разных единицах времени\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n   // Вычисляем оставшиеся дни\n  const days = Math.floor(ms / day);\n  // Вычисляем оставшиеся часы\n  const hours = Math.floor((ms % day) / hour);\n  // Вычисляем оставшиеся минуты\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Вычисляем оставшиеся секунды\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    // Возвращаем объект с оставшимися днями, часами, минутами и секундами\n  return { days, hours, minutes, seconds };\n}\n// Пример использования функции convertMs\nconsole.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\nconsole.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\nconsole.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n\n\n\n// Функция для старта таймера\nfunction onTimer() {\n  // Отключаем кнопку старта и инпут после начала отсчета\n  buttonStart.disabled = true;\n  inputEl.disabled = true;\n    // Запускаем интервал, который будет обновлять таймер каждую секунду\n  const timerInterval = setInterval(() => {\n      // Рассчитываем оставшееся время до выбранной даты\n    const timeRemaining = userSelectedDate - new Date();\n    // Если время вышло (timeRemaining < 0), останавливаем таймер\n    if (timeRemaining < 0) {\n      clearInterval(timerInterval); // Останавливаем интервал\n       // Показываем уведомление, что таймер завершён\n      iziToast.success({\n      message: \"Timer completed\"\n      })\n       // Отключаем кнопку старта, когда таймер завершён\n      buttonStart.disabled = true;\n       // Включаем инпут, чтобы пользователь мог выбрать другую дату\n      inputEl.disabled = false;\n    } else {\n         // Преобразуем оставшиеся миллисекунды в более читаемый формат\n      const { days, hours, minutes, seconds } = convertMs(timeRemaining);\n        // Обновляем отображение оставшихся дней, часов, минут и секунд на странице\n      document.querySelector('[data-days]').textContent = String(days).padStart(2, '0');\n      document.querySelector('[data-hours]').textContent = String(hours).padStart(2, '0');\n      document.querySelector('[data-minutes]').textContent = String(minutes).padStart(2, '0');\n      document.querySelector('[data-seconds]').textContent = String(seconds).padStart(2, '0');\n    }\n  }, 1000); // Обновляем каждую секунду\n    \n    \n  }\n\n  // Добавляем обработчик события на кнопку старта\n  buttonStart.addEventListener('click', onTimer);\n\n\n\n"],"names":["buttonStart","inputEl","userSelectedDate","options","selectedDates","iziToast","flatpickr","convertMs","ms","days","hours","minutes","seconds","onTimer","timerInterval","timeRemaining"],"mappings":"+IAMA,IAAIA,EAAc,SAAS,cAAc,cAAc,EAEnDC,EAAU,SAAS,cAAc,kBAAkB,EAGnDC,EAAmB,EAEvBF,EAAY,SAAW,GAEvB,MAAMG,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CAErBF,EAAmBE,EAAc,CAAC,EAG9BF,EAAiB,QAAS,EAAGC,EAAQ,YAAY,QAAO,GAE1DE,EAAS,MAAM,CACjB,QAAS,oCACb,CAAO,EAEDL,EAAY,SAAW,IAIvBA,EAAY,SAAW,EAE1B,CACH,EAGAM,EAAU,mBAAoBH,CAAO,EAGrC,SAASI,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAGlE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,QAAQ,IAAIL,EAAU,GAAI,CAAC,EAC3B,QAAQ,IAAIA,EAAU,IAAM,CAAC,EAC7B,QAAQ,IAAIA,EAAU,MAAQ,CAAC,EAK/B,SAASM,GAAU,CAEjBb,EAAY,SAAW,GACvBC,EAAQ,SAAW,GAEnB,MAAMa,EAAgB,YAAY,IAAM,CAEtC,MAAMC,EAAgBb,EAAmB,IAAI,KAE7C,GAAIa,EAAgB,EAClB,cAAcD,CAAa,EAE3BT,EAAS,QAAQ,CACjB,QAAS,iBACf,CAAO,EAEDL,EAAY,SAAW,GAEvBC,EAAQ,SAAW,OACd,CAEL,KAAM,CAAE,KAAAQ,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYL,EAAUQ,CAAa,EAEjE,SAAS,cAAc,aAAa,EAAE,YAAc,OAAON,CAAI,EAAE,SAAS,EAAG,GAAG,EAChF,SAAS,cAAc,cAAc,EAAE,YAAc,OAAOC,CAAK,EAAE,SAAS,EAAG,GAAG,EAClF,SAAS,cAAc,gBAAgB,EAAE,YAAc,OAAOC,CAAO,EAAE,SAAS,EAAG,GAAG,EACtF,SAAS,cAAc,gBAAgB,EAAE,YAAc,OAAOC,CAAO,EAAE,SAAS,EAAG,GAAG,CACvF,CACF,EAAE,GAAI,CAGN,CAGDZ,EAAY,iBAAiB,QAASa,CAAO"}